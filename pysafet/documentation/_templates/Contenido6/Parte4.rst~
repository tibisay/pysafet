==============================================================
:index:`Crear el flujo de trabajo utilizando un archivo XML`
==============================================================

	El flujo de trabajo (workflow) es el estudio de los aspectos operacionales de una actividad de trabajo: cómo se estructuran las tareas, cómo se realizan, cuál es su orden correlativo, cómo se sincronizan, cómo fluye la información que soporta las tareas y cómo se le hace seguimiento al cumplimiento de las tareas. Más información `AQUI`_.

.. _aqui: http://es.wikipedia.org/wiki/Flujo_de_trabajo


**A continuación seguimos los siguientes paso:**



+++++++++++++++++
  1° PRIMER PASO
+++++++++++++++++

- Crearemos un archivo llamado **productos.xml**.
- Lo guardamos en el siguiente directorio **<HOME>.safet/flowfiles/**.


+++++++++++++++++
 2° SEGUNDO PASO
+++++++++++++++++


.. _Encabezado:

-----------
Encabezado
-----------

 Abrimos el archivo **productos.xml** y Escribimos el siguiente encabezado **(XML)**:

 .. code-block:: xml

		<?xml version='1.0' encoding='UTF-8'?>
		<!DOCTYPE yawl SYSTEM 'file:///home/cenditel/.safet/dtd/yawlworkflow.dtd'>

		<!--
		Documento  : productos.xml
		Creado     : 16/10/08 09:27 AM
		Autor      : nombre_autor
		Descripcion: Archivo generado por plantilla de la Libreria SAFET
		-->

 .. note::

	El comentario es opcional.



+++++++++++++++++
 3° TERCER PASO
+++++++++++++++++

.. _TercerPaso:

-----------------------
Etiquetas Principales
-----------------------

 En el archivo **productos.xml** se utilizaran las siguientes **etiquetas principales (XML)**:

 - **<yawl>:** Etiqueta principal yawl.
 - **<workflow>:** Nombre del flujo.
 - **<token>:** Ficha: Nombre de la tabla  y Nombre del campo.


 Abrimos el archivo **productos.xml** y debajo del :ref:`Encabezado` copiamos el siguiente código **(XML)**:

 .. code-block:: xml

	<yawl version="0.01">
	 <workflow id="productos">
	  <token keysource="productos" key="id"/>

	   <!--  **CUERPO**
	    Aqui vamos a colocar todos los estados o tareas.
		  #########################
		  ## - INICIAL           ##
		  ##    - REGISTRADO.    ##
		  ##    - PEDIDO         ##
		  ##      - DISPONIBLE   ##
		  ##      - POR_LLEGAR   ##
		  ##    - POR_AGOTARSE   ##
		  ##    - AGOSTADO       ##
		  ## - FINAL             ##
		  #########################
	   -->

	 </workflow>
	</yawl>


 .. note::  -  EL cuadro se me muestra comentado es opcional solo para visualizar como van hacer las tareas.
 			 -  Todas las tareas o estados van donde esta el cuadro opcional.



+++++++++++++++++
 4° CUARTO PASO
+++++++++++++++++

.. _Condiciones:

-------------------------------------------
 Condiciones Principales (INICIAL Y FINAL)
-------------------------------------------

 En las **condiciones principal (inicial y final)** se utilizaran las siguientes **etiquetas (XML)**:

 - **<condition>:**
 - **<port>:**
 - **<connection>:** Como no hay nada registrado inicio apunta a final 

 Abrimos el archivo **productos.xml** y dentro de las :ref:`TercerPaso` insertamos el siguiente código **(XML)**: 

 .. code-block:: xml

       <!--
       #####################
       # Condición inicial #
       #####################
       -->
         <condition type="start" id="inicial">
          <port side="forward" type="split">
           <connection query="true" options="" source="final"/>
          </port>
         </condition>

       <!--
       ###################
       # Condición final #
       ###################
       -->
         <condition id="final">
          <port side="forward" type="split">
           <connection source=""/>
          </port>
         </condition>


 **Ahora ejecutaremos los siguiente pasos:**


 - Crearemos una carpeta llamada **tmp** en directorio **$HOME/tmp**, desde la consola de comando.

  .. code-block:: bash

     $ mkdir $HOME/tmp


 - Crearemos un archivo con extensión **.py** en directorio **$HOME**,desde la consola de comando.


  .. code-block:: bash

    $ touch $HOME/Script_graficos.py

 - Abrimos el archivo **.py** que creamos en el paso anterior la cual lo llamamos **Script_graficos.py** y copiamos el siguiente Script**(python)**:

  .. code-block:: python


     # -*- coding: utf-8 -*-

     import Safet
     import os

     myhome = os.getenv("HOME")
     mymedia = myhome + "/tmp"
     myurl = "http://localhost"

     myinflow = Safet.MainWindow(myhome)

     myinflow.setMediaPath(mymedia )
     myinflow.setHostURL(myurl) 

     result = myinflow.login("admin","admin") 

     myconsult = u"operacion:Generar_gráfico_coloreado \
             Cargar_archivo_flujo: %s/.safet/flowfiles/productos.xml" % (myhome)

     if not result:
         print "Authentication failed"
         exit()

     result = myinflow.toInputConsole(myconsult)

     if not result:
         print "Consult failed error: %s"  % (myinflow.currentError())
         exit()

     print u"%s" % (myinflow.currentJSON())



 - Ejecutamos el archivo **Script_graficos.py**, desde la consola de comando como usuario normal.

  .. code-block:: bash

     $ python $HOME/Script_graficos.py

  .. note::

   Al ejecutar el archivo **.py (Script_graficos.py)** nos mostrara un mensaje donde salen reflejadas las 2 :ref:`Condiciones`:

      .. code-block:: bash

		  QFSFileEngine::open: No file name specified
		  QSqlDatabasePrivate::removeDatabase: connection '/home/cenditel/.safet/mydb.db' 
		  is still in use, all queries will cease to work.
		  .............wheretokens: on
		  .......newnode: |inicial|  # Condición inicial
		  .......newnode: |final|    # Condición final
		  qt_temp.XM6827.svg         # Octenemos el nombre de la imagen donde esta el gráfico



 - Nos vamos al directorio **$HOME/tmp**,desde la consola de comando.

  .. code-block:: bash

     $ cd $HOME/tmp


  .. note:: En el directorio **$HOME/tmp** se escriben los archivos de grafos **(.svg o .png)**, usted puede definir el directorio de escritura y temporal utilizando los siguientes parámetros en el archivo **safet.conf** que se encuentra en el directorio **$HOME/.safet/**.

		.. code-block:: bash

		 plugins.graphviz.infile =  /home/fulano/tmp   # directorio para archivos temporales
		 plugins.graphviz.outfile =  /home/fulano/tmp  # directorio de salida para archivos de grafo (.svg o .png)



 - Escribimos el comando **ls** para ver las imágenes **.svg**,desde la consola de comando.

  .. code-block:: bash

      tmp$ ls
      qt_temp.XM7929.svg


 - Con el comando **eog** vemos la primera imagen **.svg(qt_temp.XM6827.svg )** ,desde la consola de comando.

  .. code-block:: bash

      tmp$ eog qt_temp.XM6827.svg 

  .. note:: Si realizó los pasos correctos se mostrara el grafo, en el cual se define lo siguiente:



    .. _figura28:
    .. figure:: ../../_static/grafo_inflow.png
          :align: center
          :height: 250px
          :width: 200px

          **Figura 28: Condiciones (inicial y final).**


   Descripción de la :ref:`figura28`:


   - El circulo **inicial** apunta al circulo **final**.
   - En este inventario esta vacío.
   - En esta imagen vemos como se conectan las condiciones **inicial y final**. 


  .. note:: En esta imagen no se muestran ninguna tarea ya que no hemos realizado ninguna, para ello pasamos al **QUINTO PASO** donde comenzaremos a realizar las tareas. 


+++++++++++++++++
 5° QUINTO PASO
+++++++++++++++++

----------------------------------
 5.1 - PRIMERA TAREA (Registrado)
----------------------------------

 En la primera tarea **(Registrado)** se utilizaran las siguientes **etiquetas (XML)**:

 - **<condition> Inicial:**
 - **<connection> Registado:** registrado apunta a final.
 - **<task>:** Condición de Registrado la cual puede pasar un caso.
 - **<port>:** Registrado apunta a una opción.
 - **<variable>:** Variable vRegistro donde me aparecerá un mensaje la hora en el cual se hizo ese registro.

 Abrimos el archivo **productos.xml** y insertamos el código **(xml)** de la **tarea Registrado** como se muestra acontinuación:

 .. code-block:: xml

      <!--
      *********************
      | Condición inicial |
      *********************
      -->
        <condition type="start" id="inicial">
         <port side="forward" type="split">
          <connection query="select status from productos" options="Registrado" source="Registrado"/>
         </port>
        </condition>


        <!--
        **************  
        | Registrado |     
        **************               
        -->       
        <task title="en inventario" id="Registrado">                                                           

         <port side="forward" type="split">                                                                    
          <connection query="true" options="" source="final"/>                                                 
         </port>                                                                                               

         <variable config="1" documentsource="select id,mensaje,status from productos" type="sql" tokenlink="" 
          id="vRegistrado" rolfield="(select rol from productos_registro where productoid=productos.id and     
          regstatus='Registrado') as rol" scope="task" timestampfield="(select fecha from                      
          productos_registro where productoid=productos.id and regstatus='Registrado') as fecha"/>             
                                                                                                               
        </task>                                                                                                 

      <!--
      *******************
      | Condición final |
      *******************
      -->
        <condition id="final">
         <port side="forward" type="split">
          <connection source=""/>
         </port>
        </condition>

 **Ahora ejecutaremos los siguiente pasos:**

 .. note::

  En el **4° paso** anterior creamos la carpeta llamada **tmp** y el archivo llamado **.py (Script_graficos.py)** ,la cual se utilizaran en este paso a seguir.

 - Ejecutamos el mismo archivo **.py (Script_graficos.py)** con el mismo contenido, desde la consola de comando como usuario normal.

  .. code-block:: bash

     $ python $HOME/Script_graficos.py


  .. note::

   Al ejecutar el archivo **.py (Script_graficos.py)** nos mostrara un mensaje donde salen reflejadas las 2 **Condiciones principales** y la primera tarea **(Registrado)**:

      .. code-block:: bash

		  QFSFileEngine::open: No file name specified
		  QSqlDatabasePrivate::removeDatabase: connection '/home/cenditel/.safet/mydb.db' 
		  is still in use, all queries will cease to work.
		  .............wheretokens: on
		  .......newnode: |Registrado| # Tarea Registrado
		  .......newnode: |inicial|    # Condición inicial
		  .......newnode: |final|      # Condición final
		  qt_temp.XM6827.svg           # Obtenemos el nombre de la imagen donde esta el gráfico


 - Nos vamos al directorio **$HOME/tmp**,desde la consola de comando.

  .. code-block:: bash

     $ cd $HOME/tmp

 - Escribimos el comando **ls** para ver las 2 imágenes **.svg** que hemos obtenido ,desde la consola de comando.

  .. code-block:: bash

      tmp$ ls
      qt_temp.XM6827.svg ,qt_temp.XM6970.svg


 - Con el comando **eog** vemos la la segunda imagen **.svg(qt_temp.XM6827.svg )** ,desde la consola de comando.

  .. code-block:: bash

      tmp$ eog qt_temp.XM6970.svg

  .. note::

    Si realizó los pasos correctos, se mostrara el grafo como en la imagen siguiente :ref:`figura29`:



      .. _figura29:
      .. figure:: ../../_static/grafo_inflow1.png
          :align: center
          :height: 300px
          :width: 170px

          **Figura 29: Registrado**


    Descripción de la :ref:`figura29`:

    - La condición del circulo **inicial** apunta a la primera tarea de cuadro **Registrado**.
    - La primera tarea **Registrado** apunta a la condición de circulo **final**
    - En esta imagen vemos como se conectan la condición  **inicial** con la primera tarea **Registrado**  y la tarea con la condición **final**.


-------------------------------
 5.2 - SEGUNDA TAREA (Pedido)
-------------------------------

