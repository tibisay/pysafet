/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.15.5 on Tue Mar 10 20:39:02 2015
 */

#include "sipAPISafet.h"

#line 196 "Safet.sip"
#include "../websafet/src/SafetVariable.h"
#line 12 "./sipSafetSafetVariable.cpp"

#line 36 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 16 "./sipSafetSafetVariable.cpp"
#line 31 "/usr/share/sip/PyQt4/QtSql/qsqlquery.sip"
#include <qsqlquery.h>
#line 19 "./sipSafetSafetVariable.cpp"
#line 120 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 22 "./sipSafetSafetVariable.cpp"
#line 101 "Safet.sip"
#include "../websafet/src/SafetDocument.h"
#line 25 "./sipSafetSafetVariable.cpp"
#line 89 "Safet.sip"
#include "../websafet/src/SafetXmlObject.h"
#line 28 "./sipSafetSafetVariable.cpp"
#line 345 "/usr/share/sip/PyQt4/QtXml/qdom.sip"
#include <qdom.h>
#line 31 "./sipSafetSafetVariable.cpp"
#line 31 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 34 "./sipSafetSafetVariable.cpp"
#line 355 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 37 "./sipSafetSafetVariable.cpp"
#line 338 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 40 "./sipSafetSafetVariable.cpp"
#line 34 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "./sipSafetSafetVariable.cpp"
#line 274 "/usr/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 46 "./sipSafetSafetVariable.cpp"
#line 33 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 49 "./sipSafetSafetVariable.cpp"
#line 37 "/usr/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 52 "./sipSafetSafetVariable.cpp"
#line 35 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 55 "./sipSafetSafetVariable.cpp"
#line 120 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 58 "./sipSafetSafetVariable.cpp"
#line 31 "/usr/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 61 "./sipSafetSafetVariable.cpp"
#line 35 "/usr/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 64 "./sipSafetSafetVariable.cpp"
#line 31 "/usr/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 67 "./sipSafetSafetVariable.cpp"


class sipSafetVariable : public SafetVariable
{
public:
    sipSafetVariable();
    virtual ~sipSafetVariable();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    int sipProtect_senderSignalIndex() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char *);
    void connectNotify(const char *);
    void customEvent(QEvent *);
    void childEvent(QChildEvent *);
    void timerEvent(QTimerEvent *);
    bool eventFilter(QObject *,QEvent *);
    bool event(QEvent *);
    void addChild(SafetXmlObject *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipSafetVariable(const sipSafetVariable &);
    sipSafetVariable &operator = (const sipSafetVariable &);

    char sipPyMethods[8];
};

sipSafetVariable::sipSafetVariable(): SafetVariable(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipSafetVariable::~sipSafetVariable()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipSafetVariable::metaObject() const
{
    return sip_Safet_qt_metaobject(sipPySelf,sipType_SafetVariable);
}

int sipSafetVariable::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = SafetVariable::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_Safet_qt_metacall(sipPySelf,sipType_SafetVariable,_c,_id,_a);

    return _id;
}

void *sipSafetVariable::qt_metacast(const char *_clname)
{
    return (sip_Safet_qt_metacast(sipPySelf, sipType_SafetVariable, _clname)) ? this : SafetVariable::qt_metacast(_clname);
}

void sipSafetVariable::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        SafetVariable::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_Safet_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipSafetVariable::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        SafetVariable::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_Safet_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipSafetVariable::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        SafetVariable::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_Safet_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipSafetVariable::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        SafetVariable::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_Safet_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipSafetVariable::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        SafetVariable::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_Safet_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipSafetVariable::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return SafetVariable::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_Safet_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipSafetVariable::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return SafetVariable::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_Safet_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipSafetVariable::addChild(SafetXmlObject *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_addChild);

    if (!sipMeth)
    {
        SafetVariable::addChild(a0);
        return;
    }

    extern void sipVH_Safet_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, SafetXmlObject *);

    sipVH_Safet_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QObject * sipSafetVariable::sipProtect_sender() const
{
    return QObject::sender();
}

int sipSafetVariable::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipSafetVariable::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipSafetVariable::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipSafetVariable::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipSafetVariable::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipSafetVariable::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipSafetVariable::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}


extern "C" {static PyObject *meth_SafetVariable_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipSafetVariable *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_SafetVariable, &sipCpp))
        {
            QObject *sipRes = 0;

#line 643 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (helper)
            sipRes = helper(sipRes);
#line 361 "./sipSafetSafetVariable.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        const sipSafetVariable *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BG", &sipSelf, sipType_SafetVariable, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 669 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        // PyQt5: Get rid of the const casts.
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(const_cast<QObject *>(sipCpp), a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(const_cast<QObject *>(static_cast<const QObject *>(sipCpp)), a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 404 "./sipSafetSafetVariable.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipSafetVariable *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_SafetVariable, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipSafetVariable *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_SafetVariable, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipSafetVariable *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_SafetVariable, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipSafetVariable *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BG", &sipSelf, sipType_SafetVariable, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipSafetVariable *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BG", &sipSelf, sipType_SafetVariable, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipSafetVariable *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_SafetVariable, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_senderSignalIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_senderSignalIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_addChild(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_addChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        SafetXmlObject * a0;
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_SafetVariable, &sipCpp, sipType_SafetXmlObject, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->SafetVariable::addChild(a0) : sipCpp->addChild(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_addChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_id(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_id(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetVariable, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->id());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_id, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_setId(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_setId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetVariable, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setId(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_setId, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_tokenlink(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_tokenlink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetVariable, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->tokenlink());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_tokenlink, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_setTokenlink(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_setTokenlink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetVariable, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTokenlink(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_setTokenlink, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_scope(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_scope(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetVariable, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->scope());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_scope, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_setScope(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_setScope(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetVariable, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScope(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_setScope, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_type(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetVariable, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->type());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_type, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_setType(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_setType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetVariable, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setType(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_setType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_config(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_config(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetVariable, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->config());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_config, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_setConfig(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_setConfig(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetVariable, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setConfig(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_setConfig, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_source(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetVariable, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->source());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_source, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_setSource(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_setSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetVariable, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSource(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_setSource, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_documentsource(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_documentsource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetVariable, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->documentsource());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_documentsource, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_setDocumentsource(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_setDocumentsource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetVariable, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocumentsource(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_setDocumentsource, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_description(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetVariable, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->description());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_description, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_setDescription(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_setDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetVariable, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDescription(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_setDescription, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_foo(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_foo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetVariable, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->foo());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_foo, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_getDocumentCount(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_getDocumentCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetVariable, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getDocumentCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_getDocumentCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_getDocuments(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_getDocuments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetVariable, &sipCpp))
        {
            QList<SafetDocument *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->getDocuments();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QList_0101SafetDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_getDocuments, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_getXMLDocument(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_getXMLDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        long a1;
        QString * a2;
        int a2State = 0;
        const SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1lJ1", &sipSelf, sipType_SafetVariable, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QString,&a2, &a2State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->getXMLDocument(*a0,a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_getXMLDocument, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetVariable_createXMLFileFromQuery(PyObject *, PyObject *);}
static PyObject *meth_SafetVariable_createXMLFileFromQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery * a0;
        const QString * a1;
        int a1State = 0;
        const SafetVariable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_SafetVariable, &sipCpp, sipType_QSqlQuery, &a0, sipType_QString,&a1, &a1State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->createXMLFileFromQuery(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetVariable, sipName_createXMLFileFromQuery, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_SafetVariable(void *, const sipTypeDef *);}
static void *cast_SafetVariable(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_SafetVariable)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_SafetXmlObject)->ctd_cast((SafetXmlObject *)(SafetVariable *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_SafetVariable(void *, int);}
static void release_SafetVariable(void *sipCppV,int)
{
    SafetVariable *sipCpp = reinterpret_cast<SafetVariable *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_SafetVariable(sipSimpleWrapper *);}
static void dealloc_SafetVariable(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipSafetVariable *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_SafetVariable(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_SafetVariable(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_SafetVariable(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipSafetVariable *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipSafetVariable();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_SafetVariable[] = {{9, 255, 1}};


static PyMethodDef methods_SafetVariable[] = {
    {SIP_MLNAME_CAST(sipName_addChild), meth_SafetVariable_addChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_SafetVariable_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_config), meth_SafetVariable_config, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_SafetVariable_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createXMLFileFromQuery), meth_SafetVariable_createXMLFileFromQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_SafetVariable_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_description), meth_SafetVariable_description, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_SafetVariable_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_documentsource), meth_SafetVariable_documentsource, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_foo), meth_SafetVariable_foo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDocumentCount), meth_SafetVariable_getDocumentCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDocuments), meth_SafetVariable_getDocuments, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getXMLDocument), meth_SafetVariable_getXMLDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_id), meth_SafetVariable_id, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_SafetVariable_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_scope), meth_SafetVariable_scope, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_SafetVariable_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_SafetVariable_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setConfig), meth_SafetVariable_setConfig, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDescription), meth_SafetVariable_setDescription, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDocumentsource), meth_SafetVariable_setDocumentsource, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setId), meth_SafetVariable_setId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setScope), meth_SafetVariable_setScope, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSource), meth_SafetVariable_setSource, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTokenlink), meth_SafetVariable_setTokenlink, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setType), meth_SafetVariable_setType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_source), meth_SafetVariable_source, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_SafetVariable_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_tokenlink), meth_SafetVariable_tokenlink, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_type), meth_SafetVariable_type, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_Safet_SafetVariable = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_SafetVariable,
        {0}
    },
    {
        sipNameNr_SafetVariable,
        {0, 0, 1},
        30, methods_SafetVariable,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_SafetVariable,
    0,
    init_type_SafetVariable,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_SafetVariable,
    0,
    0,
    0,
    release_SafetVariable,
    cast_SafetVariable,
    0,
    0,
    0,
    0,
    0,
    0
},
    &SafetVariable::staticMetaObject,
    0,
    0
};
