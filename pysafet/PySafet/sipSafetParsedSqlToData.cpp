/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.3 on Thu Jun  4 14:53:19 2015
 */

#include "sipAPISafet.h"

#line 259 "Safet.sip"
#include "../websafet/src/SafetYAWL.h"
#line 12 "./sipSafetParsedSqlToData.cpp"

#line 36 "/usr/share/sip/PyQt4/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 16 "./sipSafetParsedSqlToData.cpp"
#line 36 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 19 "./sipSafetParsedSqlToData.cpp"
#line 33 "/usr/share/sip/PyQt4/QtCore/qmap.sip"
#include <qmap.h>
#line 22 "./sipSafetParsedSqlToData.cpp"
#line 77 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 25 "./sipSafetParsedSqlToData.cpp"


extern "C" {static PyObject *meth_ParsedSqlToData_isNull(PyObject *, PyObject *);}
static PyObject *meth_ParsedSqlToData_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        ParsedSqlToData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ParsedSqlToData, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ParsedSqlToData, sipName_isNull, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_ParsedSqlToData(void *, const sipTypeDef *);}
static void *cast_ParsedSqlToData(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_ParsedSqlToData)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_ParsedSqlToData(void *, int);}
static void release_ParsedSqlToData(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<ParsedSqlToData *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_ParsedSqlToData(void *, SIP_SSIZE_T, const void *);}
static void assign_ParsedSqlToData(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<ParsedSqlToData *>(sipDst)[sipDstIdx] = *reinterpret_cast<const ParsedSqlToData *>(sipSrc);
}


extern "C" {static void *array_ParsedSqlToData(SIP_SSIZE_T);}
static void *array_ParsedSqlToData(SIP_SSIZE_T sipNrElem)
{
    return new ParsedSqlToData[sipNrElem];
}


extern "C" {static void *copy_ParsedSqlToData(const void *, SIP_SSIZE_T);}
static void *copy_ParsedSqlToData(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new ParsedSqlToData(reinterpret_cast<const ParsedSqlToData *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_ParsedSqlToData(sipSimpleWrapper *);}
static void dealloc_ParsedSqlToData(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_ParsedSqlToData(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_ParsedSqlToData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_ParsedSqlToData(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    ParsedSqlToData *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new ParsedSqlToData();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const ParsedSqlToData * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_ParsedSqlToData, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new ParsedSqlToData(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_ParsedSqlToData[] = {
    {SIP_MLNAME_CAST(sipName_isNull), meth_ParsedSqlToData_isNull, METH_VARARGS, NULL}
};


extern "C" {static PyObject *varget_ParsedSqlToData_fields(void *, PyObject *);}
static PyObject *varget_ParsedSqlToData_fields(void *sipSelf, PyObject *)
{
    QStringList *sipVal;
    ParsedSqlToData *sipCpp = reinterpret_cast<ParsedSqlToData *>(sipSelf);

    sipVal = &sipCpp->fields;

    return sipConvertFromType(sipVal, sipType_QStringList, NULL);
}


extern "C" {static int varset_ParsedSqlToData_fields(void *, PyObject *, PyObject *);}
static int varset_ParsedSqlToData_fields(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QStringList *sipVal;
    ParsedSqlToData *sipCpp = reinterpret_cast<ParsedSqlToData *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QStringList *>(sipForceConvertToType(sipPy,sipType_QStringList,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->fields = *sipVal;

    sipReleaseType(sipVal, sipType_QStringList, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_ParsedSqlToData_key(void *, PyObject *);}
static PyObject *varget_ParsedSqlToData_key(void *sipSelf, PyObject *)
{
    QString *sipVal;
    ParsedSqlToData *sipCpp = reinterpret_cast<ParsedSqlToData *>(sipSelf);

    sipVal = &sipCpp->key;

    return sipConvertFromType(sipVal, sipType_QString, NULL);
}


extern "C" {static int varset_ParsedSqlToData_key(void *, PyObject *, PyObject *);}
static int varset_ParsedSqlToData_key(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QString *sipVal;
    ParsedSqlToData *sipCpp = reinterpret_cast<ParsedSqlToData *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QString *>(sipForceConvertToType(sipPy,sipType_QString,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->key = *sipVal;

    sipReleaseType(sipVal, sipType_QString, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_ParsedSqlToData_keyvalue(void *, PyObject *);}
static PyObject *varget_ParsedSqlToData_keyvalue(void *sipSelf, PyObject *)
{
    QString *sipVal;
    ParsedSqlToData *sipCpp = reinterpret_cast<ParsedSqlToData *>(sipSelf);

    sipVal = &sipCpp->keyvalue;

    return sipConvertFromType(sipVal, sipType_QString, NULL);
}


extern "C" {static int varset_ParsedSqlToData_keyvalue(void *, PyObject *, PyObject *);}
static int varset_ParsedSqlToData_keyvalue(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QString *sipVal;
    ParsedSqlToData *sipCpp = reinterpret_cast<ParsedSqlToData *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QString *>(sipForceConvertToType(sipPy,sipType_QString,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->keyvalue = *sipVal;

    sipReleaseType(sipVal, sipType_QString, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_ParsedSqlToData_map(void *, PyObject *);}
static PyObject *varget_ParsedSqlToData_map(void *sipSelf, PyObject *)
{
    QMap<QString,QString> *sipVal;
    ParsedSqlToData *sipCpp = reinterpret_cast<ParsedSqlToData *>(sipSelf);

    sipVal = &sipCpp->map;

    return sipConvertFromType(sipVal, sipType_QMap_0100QString_0100QString, NULL);
}


extern "C" {static int varset_ParsedSqlToData_map(void *, PyObject *, PyObject *);}
static int varset_ParsedSqlToData_map(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QMap<QString,QString> *sipVal;
    ParsedSqlToData *sipCpp = reinterpret_cast<ParsedSqlToData *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QMap<QString,QString> *>(sipForceConvertToType(sipPy,sipType_QMap_0100QString_0100QString,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->map = *sipVal;

    sipReleaseType(sipVal, sipType_QMap_0100QString_0100QString, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_ParsedSqlToData_null(void *, PyObject *);}
static PyObject *varget_ParsedSqlToData_null(void *sipSelf, PyObject *)
{
    bool sipVal;
    ParsedSqlToData *sipCpp = reinterpret_cast<ParsedSqlToData *>(sipSelf);

    sipVal = sipCpp->null;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_ParsedSqlToData_null(void *, PyObject *, PyObject *);}
static int varset_ParsedSqlToData_null(void *sipSelf, PyObject *sipPy, PyObject *)
{
    bool sipVal;
    ParsedSqlToData *sipCpp = reinterpret_cast<ParsedSqlToData *>(sipSelf);

    sipVal = (bool)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->null = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_ParsedSqlToData_table(void *, PyObject *);}
static PyObject *varget_ParsedSqlToData_table(void *sipSelf, PyObject *)
{
    QString *sipVal;
    ParsedSqlToData *sipCpp = reinterpret_cast<ParsedSqlToData *>(sipSelf);

    sipVal = &sipCpp->table;

    return sipConvertFromType(sipVal, sipType_QString, NULL);
}


extern "C" {static int varset_ParsedSqlToData_table(void *, PyObject *, PyObject *);}
static int varset_ParsedSqlToData_table(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QString *sipVal;
    ParsedSqlToData *sipCpp = reinterpret_cast<ParsedSqlToData *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QString *>(sipForceConvertToType(sipPy,sipType_QString,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->table = *sipVal;

    sipReleaseType(sipVal, sipType_QString, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_ParsedSqlToData_values(void *, PyObject *);}
static PyObject *varget_ParsedSqlToData_values(void *sipSelf, PyObject *)
{
    QStringList *sipVal;
    ParsedSqlToData *sipCpp = reinterpret_cast<ParsedSqlToData *>(sipSelf);

    sipVal = &sipCpp->values;

    return sipConvertFromType(sipVal, sipType_QStringList, NULL);
}


extern "C" {static int varset_ParsedSqlToData_values(void *, PyObject *, PyObject *);}
static int varset_ParsedSqlToData_values(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QStringList *sipVal;
    ParsedSqlToData *sipCpp = reinterpret_cast<ParsedSqlToData *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QStringList *>(sipForceConvertToType(sipPy,sipType_QStringList,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->values = *sipVal;

    sipReleaseType(sipVal, sipType_QStringList, sipValState);

    return 0;
}

sipVariableDef variables_ParsedSqlToData[] = {
    {InstanceVariable, sipName_fields, (PyMethodDef *)varget_ParsedSqlToData_fields, (PyMethodDef *)varset_ParsedSqlToData_fields, NULL, NULL},
    {InstanceVariable, sipName_key, (PyMethodDef *)varget_ParsedSqlToData_key, (PyMethodDef *)varset_ParsedSqlToData_key, NULL, NULL},
    {InstanceVariable, sipName_keyvalue, (PyMethodDef *)varget_ParsedSqlToData_keyvalue, (PyMethodDef *)varset_ParsedSqlToData_keyvalue, NULL, NULL},
    {InstanceVariable, sipName_map, (PyMethodDef *)varget_ParsedSqlToData_map, (PyMethodDef *)varset_ParsedSqlToData_map, NULL, NULL},
    {InstanceVariable, sipName_null, (PyMethodDef *)varget_ParsedSqlToData_null, (PyMethodDef *)varset_ParsedSqlToData_null, NULL, NULL},
    {InstanceVariable, sipName_table, (PyMethodDef *)varget_ParsedSqlToData_table, (PyMethodDef *)varset_ParsedSqlToData_table, NULL, NULL},
    {InstanceVariable, sipName_values, (PyMethodDef *)varget_ParsedSqlToData_values, (PyMethodDef *)varset_ParsedSqlToData_values, NULL, NULL},
};


pyqt4ClassTypeDef sipTypeDef_Safet_ParsedSqlToData = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_ParsedSqlToData,
        {0}
    },
    {
        sipNameNr_ParsedSqlToData,
        {0, 0, 1},
        1, methods_ParsedSqlToData,
        0, 0,
        7, variables_ParsedSqlToData,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_ParsedSqlToData,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_ParsedSqlToData,
    assign_ParsedSqlToData,
    array_ParsedSqlToData,
    copy_ParsedSqlToData,
    release_ParsedSqlToData,
    cast_ParsedSqlToData,
    0,
    0,
    0
},
    0,
    0,
    0
};
